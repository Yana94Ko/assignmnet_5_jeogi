// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id
  email             String        @unique
  encryptedPassword String
  profile           UserProfile?
  createdAt         DateTime      @default(now())
  reservations      Reservation[]
  reviews           Review[]
}

model UserProfile {
  userId      String   @id
  user        User     @relation(fields: [userId], references: [id])
  nickname    String
  phoneNumber String?
  updatedAt   DateTime @updatedAt
}

model Partner {
  id                String          @id
  email             String          @unique
  encryptedPassword String
  businessName      String
  phoneNumber       String
  staffName         String
  createdAt         DateTime        @default(now())
  accomodations     Accommodation[]
}

model Accommodation {
  id          Int               @id @default(autoincrement())
  partnerId   String
  partner     Partner           @relation(fields: [partnerId], references: [id])
  regions     Region[]
  rooms       Room[]
  name        String
  description String?
  type        AccommodationType
  address1    String
  address2    String
  latitude    Float
  longitude   Float
  imgUrl      String            @default("")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum AccommodationType {
  hotel
  motel
  resort
  pension
  guestHouse
  poolVilla
  camping
  glamping
}

model Region {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  label         String
  accomodations Accommodation[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Room {
  id              Int           @id @default(autoincrement())
  accommodationId Int
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  name            String
  description     String        @default("")
  originalPrice   Int
  price           Int
  checkInTime     String
  checkOutTime    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  reservaions     Reservation[]
  reviews         Review[]
}

model Reservation {
  id          String    @id
  reservedAt  DateTime?
  checkedInAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  reservedBy   User?   @relation(fields: [reservedById], references: [id])
  reservedById String?

  room   Room @relation(fields: [roomId], references: [id])
  roomId Int

  date   DateTime
  review Review?

  @@unique([roomId, date])
}

model Review {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  room        Room        @relation(fields: [roomId], references: [id])
  reservation Reservation @relation(fields: [reservationId], references: [id])
  rating      Int
  content     String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  roomId        Int
  reservationId String   @unique
}
